/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JSlickProd;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ApiKeyRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JApiKey extends TableImpl<ApiKeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>slick_prod.API_KEY</code>
     */
    public static final JApiKey API_KEY = new JApiKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiKeyRecord> getRecordType() {
        return ApiKeyRecord.class;
    }

    /**
     * The column <code>slick_prod.API_KEY.KEY</code>.
     */
    public final TableField<ApiKeyRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.EMAIL</code>.
     */
    public final TableField<ApiKeyRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.USE_YN</code>.
     */
    public final TableField<ApiKeyRecord, String> USE_YN = createField(DSL.name("USE_YN"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'N'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>slick_prod.API_KEY.EXPIRED_DATETIME</code>.
     */
    public final TableField<ApiKeyRecord, LocalDateTime> EXPIRED_DATETIME = createField(DSL.name("EXPIRED_DATETIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.ROLE</code>.
     */
    public final TableField<ApiKeyRecord, String> ROLE = createField(DSL.name("ROLE"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'User'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>slick_prod.API_KEY.BUCKET_LEVEL</code>.
     */
    public final TableField<ApiKeyRecord, String> BUCKET_LEVEL = createField(DSL.name("BUCKET_LEVEL"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field(DSL.raw("'Basic'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>slick_prod.API_KEY.REG_DATETIME</code>.
     */
    public final TableField<ApiKeyRecord, LocalDateTime> REG_DATETIME = createField(DSL.name("REG_DATETIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.REG_ID</code>.
     */
    public final TableField<ApiKeyRecord, String> REG_ID = createField(DSL.name("REG_ID"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.UPT_DATETIME</code>.
     */
    public final TableField<ApiKeyRecord, LocalDateTime> UPT_DATETIME = createField(DSL.name("UPT_DATETIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>slick_prod.API_KEY.UPT_ID</code>.
     */
    public final TableField<ApiKeyRecord, String> UPT_ID = createField(DSL.name("UPT_ID"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    private JApiKey(Name alias, Table<ApiKeyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JApiKey(Name alias, Table<ApiKeyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>slick_prod.API_KEY</code> table reference
     */
    public JApiKey(String alias) {
        this(DSL.name(alias), API_KEY);
    }

    /**
     * Create an aliased <code>slick_prod.API_KEY</code> table reference
     */
    public JApiKey(Name alias) {
        this(alias, API_KEY);
    }

    /**
     * Create a <code>slick_prod.API_KEY</code> table reference
     */
    public JApiKey() {
        this(DSL.name("API_KEY"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSlickProd.SLICK_PROD;
    }

    @Override
    public UniqueKey<ApiKeyRecord> getPrimaryKey() {
        return Keys.KEY_API_KEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApiKeyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_API_KEY_API_KEY_UNIQUE);
    }

    @Override
    public JApiKey as(String alias) {
        return new JApiKey(DSL.name(alias), this);
    }

    @Override
    public JApiKey as(Name alias) {
        return new JApiKey(alias, this);
    }

    @Override
    public JApiKey as(Table<?> alias) {
        return new JApiKey(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKey rename(String name) {
        return new JApiKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKey rename(Name name) {
        return new JApiKey(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKey rename(Table<?> name) {
        return new JApiKey(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey where(Condition condition) {
        return new JApiKey(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKey where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKey where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKey where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKey where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKey whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
